<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_1330383_meet_sch.MeetingApiHandler</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>MeetingApiHandler</name>
        <script><![CDATA[var MeetingApiHandler = Class.create();
MeetingApiHandler.prototype = {
    initialize: function() {
        this.schedule_meeting = "x_1330383_meet_sch_scheduled_meeting";
        this.recurring_schedule = "x_1330383_meet_sch_reccuring_schedule";
        this.meeting_reminder = "x_1330383_meet_sch_meeting_reminder";
        this.meeting_repeat_day = "x_1330383_meet_sch_meeting_repeat_day";
        this.meeting_attendee = "x_1330383_meet_sch_meeting_attendee";
        this.meeting_active = "x_1330383_meet_sch_meeting_active";
        this.meeting_history = "x_1330383_meet_sch_meeting_history";
    },
// fetching specific meeting data based on it's ID
	
    getMeeting: function(id) {
        var meetingGr = new GlideRecord(this.schedule_meeting);
        meetingGr.addQuery("sys_id", id);
        meetingGr.query();
        if (meetingGr.next()) {
            return {
                id: meetingGr.getValue("sys_id"),
                title: meetingGr.getValue("title"),
                agenda: meetingGr.getValue("agenda"),
                description: meetingGr.getValue("description"),
                url: meetingGr.getValue("url"),
                start_datetime: meetingGr.getValue("start_datetime"),
                end_datetime: meetingGr.getValue("end_datetime"),
                is_ended: meetingGr.getValue("is_ended"),
                reminder: meetingGr.getValue("reminder"),
                recurrence: meetingGr.getValue("recurrence"),
            };
        } else {
            throw new sn_ws_err.NotFoundError("meeting not found with id=" + id);
        }
    },

    createRecord: function(body) {
        // getting all mandatory fields for the schedule meeting table.
        var arr_fields = this._getMandatoryFields(this.schedule_meeting);
        var weekRepeat = 1; // from body
        var meetingGr = new GlideRecord(this.schedule_meeting);
		
        //setting mandatory fields to GlideRecord or throwing errors.
        for (var af = 0; af < arr_fields.length; af++) {
            var field = arr_fields[af];
            if (!body[field] || body[field] == "null" || body[field] == "") {
                throw new sn_ws_err.BadRequestError("" + field + " is required");
            } else {
                meetingGr.setValue(field, body[field]);
            }
        }
        meetingGr.setValue("url", body.url);
		
        var start_date = body.start_datetime;
        var end_date = body.end_datetime;

        if (!body.attendees || body.attendees.length == 0) {
            throw new sn_ws_err.BadRequestError("attendees are required");
        }
		// start date object
        var cgd = new GlideDateTime(start_date);
        cgd.addSeconds(-cgd.getTZOffset() / 1000); //converting to UTC timezone
        
		// end date object
        var egd = new GlideDateTime(end_date);
        egd.addSeconds(-egd.getTZOffset() / 1000); //converting to UTC timezone
      

        //handling recurring meeting if required
        if (body.recurrence.hasRecurrence) {
            //inserting recurrence schedule
            var rec_id = this._addRecurringSchedule(body.recurrence);
            //endAfter choiceType 
			// handling for number of occurence
            if (body.recurrence.endsAfter == "occurrence") {
                var occurrence = body.recurrence.occurrence;
                var cDay = 0;
                while (occurrence > 0) {
                    cDay = cgd.getDayOfWeekUTC();
                    if (body.recurrence.selectedDays[cDay - 1]) {
						
                        var tmp = new GlideDateTime(cgd.getDate());
                        tmp.addSeconds(egd.getTime().getNumericValue() / 1000);
                        meetingGr.setValue("start_datetime", cgd);
                        meetingGr.setValue("end_datetime", tmp);
                        meetingGr.setValue("recurrence", rec_id);
						
						// inserting data into all th related tables and schedule meeting table
                        this._addScheduleMeeting(meetingGr, body);
                        occurrence--;
                    }
                    if (cDay == 7) {
                        cgd.addWeeksUTC(weekRepeat - 1);
                    }
                    cgd.addDaysUTC(1);
                }
            } else {
				// handling for EndAfter , specific date.
				
                while (
                    cgd.getDate().getNumericValue() <= egd.getDate().getNumericValue()
                ) {
                    cDay = cgd.getDayOfWeekUTC();
                    if (body.recurrence.selectedDays[cDay - 1]) {
                        var tmp = new GlideDateTime(cgd.getValue());
                        tmp.addSeconds(egd.getTime().getNumericValue() / 1000);
                        meetingGr.setValue("start_datetime", cgd);
                        meetingGr.setValue("end_datetime", tmp);
                        meetingGr.setValue("recurrence", rec_id);
                        this._addScheduleMeeting(meetingGr, body);
                    }
                    if (cDay == 7) {
                        cgd.addWeeksUTC(weekRepeat - 1);
                    }
                    cgd.addDaysUTC(1);
                }
            }
			
            //inserting meeting repeat days
            for (var wd = 0; wd < body.recurrence.weekdays.length; wd++) {
                if (body.recurrence.selectedDays[wd]) {
                    this._addWeekdaysOfMeetingSchedule(
                        rec_id,
                        body.recurrence.weekdays[wd]
                    );
                }
            }
        } else {
			// setting data for non reccuring meerting 
			
            meetingGr.setValue("start_datetime", cgd);
            meetingGr.setValue("end_datetime", egd);
            meetingGr.setValue("recurrence", null);
            this._addScheduleMeeting(meetingGr, body);
        }
		
        return {
            message: "Meeting created successfully",
        };
    },

	
    updateRecord: function(id, body) {
        var meetingGr = new GlideRecord(this.schedule_meeting);
        var arr_fields = this._getMandatoryFields();
        meetingGr.addQuery("sys_id", id);
        meetingGr.query();
        if (meetingGr.next()) {
            for (field in body) {
                if (
                    arr_fields.includes(field) &&
                    (!body[field] || body[field] == "null" || body[field] == "")
                ) {
                    throw new sn_ws_err.BadRequestError(
                        "cannot set mandatory field :" + field + " as empty"
                    );
                } else {
                    meetingGr.setValue(field, body[field]);
                }
            }
            meetingGr.update();
        } else {
            throw new sn_ws_err.NotFoundError("meeting not found with id=" + id);
        }
        return {
            id: id,
            message: "Meeting updated successfully",
        };
    },

//  deleting record from the tables 
	
    deleteRecord: function(id) {
        var meetingGr = new GlideRecord(this.schedule_meeting);
        meetingGr.addQuery("sys_id", id);
        meetingGr.query();
        if (meetingGr.next()) {
            meetingGr.deleteRecord();
            return {
                id: id,
                message: "Meeting deleted successfully",
            };
        } else {
            throw new sn_ws_err.NotFoundError("meeting not found with id=" + id);
        }
    },

// getting attendees data for search feilds assign to and participents 
    getAttendeesForMeeting: function(meeting_id) {
        var attendeeGr = new GlideRecord(this.meeting_attendee);
        attendeeGr.addQuery("meeting_id", "=", meeting_id);
        attendeeGr.query();
        var result = [];
        if (!attendeeGr.hasNext()) {
            throw new sn_ws_err.NotFoundError(
                "There is no such meeting for id=" + meeting_id
            );
        }
        while (attendeeGr.next()) {
            result.push({
                id: attendeeGr.getValue("user_id"),
                name: attendeeGr.user_id.getDisplayValue("name"),
                user_name: attendeeGr.user_id.getDisplayValue("user_name"),
            });
        }
        return result;
    },


    //inserting  schedule meeting
    _addScheduleMeeting: function(mGr, body) {
        //adding attendees for this meeting attendees array contain sys_id of users
        var meetingId = mGr.insert();
        for (var i = 0; i < body.attendees.length; i++) {
            this._addAttendeesForMeeting(body.attendees[i], meetingId);
        }
		//adding meetings to active table.
        this._addActiveMeeting(meetingId, body.title, body.agenda);
    },
	
    _addMeetingHistory: function(id, start_date, end_date, notes) {
        var mhGr = new GlideRecord(this.meeting_history);
        mhGr.initialize();
        mhGr.setValue("meeting_id", id);
        mhGr.setValue("start_date", start_date);
        mhGr.setValue("end_date", end_date);
        mhGr.setValue("meeting_id", id);
        return mhGr.insert();
    },
    _addActiveMeeting: function(id, title, agenda) {
        var amGr = new GlideRecord(this.meeting_active);
        amGr.initialize();
        amGr.setValue("meeting_id", id);
        amGr.setValue("agenda", agenda);
        amGr.setValue("title", title);
        return amGr.insert();
    },
    _addAttendeesForMeeting: function(userId, meetingId) {
        // for inserting attendees for meeting
        var aGr = new GlideRecord(this.meeting_attendee);
        aGr.initialize();
        aGr.setValue("meeting_id", meetingId);
        aGr.setValue("user_id", userId);
        return aGr.insert();
    },

    _addRecurringSchedule: function(data) {
        // for inserting recurring schedule for meeting
        var rsGr = new GlideRecord(this.recurring_schedule);
        rsGr.initialize();
        for (var key in data) {
            rsGr.setValue(key, data[key]);
        }
        return rsGr.insert();
    },

    _addWeekdaysOfMeetingSchedule: function(reference, day) {
        // for inserting weekdays for meeting
        var mrdGr = new GlideRecord(this.meeting_repeat_day);
        mrdGr.initialize();
        mrdGr.setValue("recurring_schedule_id", reference);
        mrdGr.setValue("day", day);
        return mrdGr.insert();
    },

    _getMandatoryFields: function(tableName) {
        // for retrieving mandatory field of table
        var arr_fields = [];
        var fields = new GlideRecord("sys_dictionary");
        fields.addQuery("name", tableName);
        fields.addQuery("mandatory", true);
        fields.query();
        while (fields.next()) {
            arr_fields.push(fields.getValue("element"));
        }
        return arr_fields;
    },
    type: "MeetingApiHandler",
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-03-06 06:54:24</sys_created_on>
        <sys_id>b87ae74947700210426da9f8536d43eb</sys_id>
        <sys_mod_count>24</sys_mod_count>
        <sys_name>MeetingApiHandler</sys_name>
        <sys_package display_value="Meet Schedule System " source="x_1330383_meet_sch">8c5adf4547300210426da9f8536d43ae</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Meet Schedule System ">8c5adf4547300210426da9f8536d43ae</sys_scope>
        <sys_update_name>sys_script_include_b87ae74947700210426da9f8536d43eb</sys_update_name>
        <sys_updated_by>divy.cholera</sys_updated_by>
        <sys_updated_on>2024-03-15 07:25:58</sys_updated_on>
    </sys_script_include>
</record_update>
